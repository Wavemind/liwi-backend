wb = xlsx_package.workbook
wrap = xlsx_package.workbook.styles.add_style alignment: {wrap_text: true}
align_top = xlsx_package.workbook.styles.add_style border: { style: :thin, color: "000000" }, alignment: {horizontal: :left, vertical: :top, wrap_text: true}
align_mid = xlsx_package.workbook.styles.add_style b: true, bg_color: "D9D9D9", border: { style: :thin, color: "000000" }, alignment: {horizontal: :center , vertical: :center, wrap_text: true}

old_language = I18n.default_locale
current_language = @version.algorithm.study.default_language
I18n.default_locale = current_language

nodes = @version.algorithm.questions
drugs = @version.algorithm.health_cares.drugs
managements = @version.algorithm.health_cares.managements
questions_sequences = @version.algorithm.questions_sequences
final_diagnoses = []

wb.add_worksheet(name: "Variables") do |sheet|
  sheet.add_row ["ID", "Category", "Reference", "Label", "Neonat", "System", "Mandatory", "Identifiable", "Estimable", "Emergency status", "Round", "Description",
                 "Conditioning complaint categories", "Answers (ID | full label)", "Uses"]

  nodes.map do |node|
    answers = ""
    node.answers.each_with_index do |answer, index|
      answers += "\r" unless index == 0
      answers += "#{answer.id} | #{answer.reference_label(current_language)}"
    end

    complaint_categories = node.complaint_categories.map(&:full_reference).to_s unless node.is_a?(Questions::ComplaintCategory) || node.complaint_categories.empty?

    sheet.add_row [node.id, I18n.t("questions.categories.#{node.class.variable}.label"), node.full_reference, node.label, node.is_neonat.to_s,
                   node.system.present? ? I18n.t("questions.systems.#{node.system}") : '', node.is_mandatory.to_s, node.is_identifiable.to_s, node.estimable.to_s,
                   node.emergency_status.present? ? I18n.t("activerecord.attributes.question.emergency_statuses.#{node.emergency_status}") : '', node.round,
                   node.description, complaint_categories, answers, node.instances.map(&:diagram).map{|diag| diag.reference_label(current_language)}.join("\r")], style: wrap
  end
end

wb.add_worksheet(name: "Diagnoses") do |sheet|
  sheet.add_row ["ID", "Reference", "Label", "CC", "Cutoff start (days)", "Cutoff end (days)"]
  @version.diagnoses.map do |diag|
    sheet.add_row [diag.id, diag.full_reference, diag.label, diag.node.full_reference, diag.cut_off_start, diag.cut_off_end]

    diag.final_diagnoses.map do |fd|
      final_diagnoses.push(fd)
    end
  end
end

wb.add_worksheet(name: "Final diagnoses") do |sheet|
  sheet.add_row ["ID", "Reference", "Label", "Level of urgency", "Description"]

  final_diagnoses.map do |node|
    sheet.add_row [node.id, node.full_reference, node.label, node.level_of_urgency, node.description], style: wrap
  end
end

wb.add_worksheet(name: "Questions sequences") do |sheet|
  sheet.add_row ["ID", "Reference", "Label", "Cutoff start (days)", "Cutoff end (days)", "Minimum score", "Description", "Conditioning complaint categories", "Uses"]

  questions_sequences.map do |node|
    complaint_categories = node.complaint_categories.map(&:full_reference).to_s unless node.complaint_categories.empty?

    sheet.add_row [node.id, node.full_reference, node.label, node.cut_off_start, node.cut_off_end, node.min_score, node.description, complaint_categories, node.instances.map(&:diagram).map{|diag| diag.reference_label(current_language)}.join("\r")], style: wrap
  end
end

wb.add_worksheet(name: "Drugs") do |sheet|
  sheet.add_row ["ID", "Reference", "Label", "Level of urgency", "Description", "Diagnoses", "YI/Antibiotic/Antimalarial/None", "Formulations (ID | medication form)", "Administration route", "Number of administrations per day",
                 "Fixed Dose (Y/N)", "Is the tablet breakable", "Concentration (mg in dose)", "Total drug formulation volume (ml)", "Total drug formulation volume (mg)",
                 "Number of pills per administration", "Number of ml per administration", "Number of applications per administration", "Maximal daily dose (mg)",
                 "Minimal dose (mg/kg/day)", "Maximal dose (mg/kg/day)", "Description", "Injection dilution instructions", "Dispensing description"], height: 99, style: align_mid

  drugs.uniq.map do |node|
    drug_rows = []

    bools = ""
    bools += "YI \r" if node.is_neonat
    bools += "Antibiotic \r" if node.is_antibiotic
    bools += "Antimalarial \r" if node.is_anti_malarial

    node.formulations.each_with_index do |formulation, index|
      row = index == 0 ? [node.id, node.full_reference, node.label, node.level_of_urgency, node.description, node.instances.map(&:diagram).map{|diag| diag.reference_label(current_language)}.join("\r"), bools] : ['', '', '', '', '', '', '']
      row.push("#{formulation.id} | #{I18n.t("formulations.medication_forms.#{formulation.medication_form}")}", formulation.administration_route.name, formulation.doses_per_day, formulation.by_age ? 'Y' : 'N',
               formulation.breakable.present? ? I18n.t("formulations.breakables.#{formulation.breakable}.label") : '', formulation.liquid_concentration)

      # Logic to display the dose_form in the correct column
      if %w(capsule tablet dispersible_tablet).include?(formulation.medication_form)
        if formulation.by_age
          row.push('-', '-', formulation.unique_dose, '-', '-')
        else
          row.push('-', formulation.dose_form, '-', '-', '-')
        end
      elsif %w(syrup suspension solution powder_for_injection).include?(formulation.medication_form)
        if formulation.by_age
          row.push('-', '-', '-', formulation.unique_dose, '-')
        else
          row.push(formulation.dose_form, '-', '-', '-', '-')
        end
      else
        row.push('-', '-', '-', '-', formulation.unique_dose)
      end

      row.push(formulation.maximal_dose, formulation.maximal_dose_per_kg, formulation.minimal_dose_per_kg, formulation.description,
               formulation.injection_instructions, formulation.dispensing_description)
      row = sheet.add_row row, style: align_top
      drug_rows.push(row)
    end

    %w(A B C D E F G).each do |col|
      cells = "#{col}#{drug_rows.first.row_index + 1}:#{col}#{drug_rows.last.row_index + 1}"
      sheet.merge_cells(cells)
    end if drug_rows.any?

    sheet.column_widths(10, 10, 17, 10, 32, 32, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 32, 32, 32)
  end
end

wb.add_worksheet(name: "Managements") do |sheet|
  sheet.add_row ["ID", "Reference", "Label", "Referral", "Level of urgency", "Description", "Uses"]

  managements.map do |node|
    sheet.add_row [node.id, node.full_reference, node.label, node.is_referral.to_s, node.level_of_urgency, node.description, node.instances.map(&:diagram).map{|diag| diag.reference_label(current_language)}.join("\r")], style: wrap
  end
end

wb.add_worksheet(name: "Media") do |sheet|
  sheet.add_row ["ID", "Node type", "Node label", "Media label", "Link"]
  medias = Media.where(fileable_type: 'Node', fileable_id: (nodes.map(&:id) + managements.map(&:id) + drugs.map(&:id)))
  medias.map do |media|
    sheet.add_row [media.id, media.fileable.type, media.fileable.reference_label(current_language), media.label, media.url.url], style: wrap
  end
end

I18n.default_locale = old_language
